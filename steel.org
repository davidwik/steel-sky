#+OPTIONS: toc:nil
#+TITLE: Steel Sky Config
* Introduction

This org file generates my favorite emacs config.

The configuration is arranged with different sections as headings. ~<tab>~ to expand. ~<shift>-<tab>~ to expand/collapse all the headings. The goal is to have one emacs config that will make my life as a developer, parent, love and friend easier.

To disable a feature you can hit ~M-;~ when having your cursor in the heading.

#+BEGIN_SRC emacs-lisp :tangle yes

  ;;; Steel sky config -- steel.el
  ;;; This file has been generated from steel.org
  ;;; please edit that file instead.

  #+END_SRC

* Variables for you to set!

Here is your oppurtunity to style some quick settings.

#+BEGIN_SRC emacs-lisp :tangle yes

  ;; Set theme, there are loads which you can load via. M-x load-theme.
  ;; Remember the name and you can use it as default by changing this value.
  (defvar steel-theme 'spacemacs-dark
    "Which theme to use"
    )

  ;; Directory where you store your org-files. This is thought to be used
  ;; with org-roam. Which links different org-file like a hive-mind :O
  (defvar steel-org-dir "~/org-files"
    "Where all the org files should live"
    )

  ;; Preferred font for coding. There are many out there, this is mine.
  (defvar steel-code-font "Envy Code R"
    "The standard coding font in steel sky"
    )

  ;; Org style font.
  (defvar steel-org-font "Roboto"
    "This variable controls the main font in org mode"
    )

  ;; Should org mode start in presenter mode. This is only for big monitors.
  (defvar steel-org-use-presenter nil
    "If t org mode will work in presenter mode, good for writing."
    )


  ;; The local user's font directory. This works for debian'ish distros.
  (defvar steel-font-dir "~/.local/share/fonts"
    "The user's local font dir"
    )

  ;; Opacity value 100 is fully opaque.
  (defvar steel-opacity 95
    "The value of background opacity"
    )

#+END_SRC

* Package management

This _section_ sets up the repositories elpa and melpa. As well as package.el which will manage installation of all the other different packages.

** Initialize repositories and package.el
https://github.com/jwiegley/use-package

Most of the setup is using package.el for installation of elisp packages. But first the repositories needs to be defined.

#+BEGIN_SRC emacs-lisp :tangle yes
  (require 'package)


  ;; Adds the repositories
  (setq package-archives '(("gnu" . "https://elpa.gnu.org/packages/")
                           ("melpa" . "https://melpa.org/packages/")))

  (defvar custom/packages '(use-package
                             )
    "A list of packages to ensure are installed at launch.")

  (defun custom/packages-installed-p ()
    (cl-loop for pkg in custom/packages
             when (not (package-installed-p pkg)) do (cl-return nil)
             finally (cl-return t)))

  (unless (custom/packages-installed-p)
    (when (not package-archive-contents)
      (message "%s" "Refreshing package database...")
      (package-refresh-contents)
      (dolist (pkg custom/packages)
        (when (not (package-installed-p pkg))
          (package-install pkg)))))
  (provide 'custom/packages)

  #+END_SRC

** Auto upgrade packages
https://github.com/rranelli/auto-package-update.el

Automatically keeps all the Emacs packages fresh!

#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package auto-package-update
    :ensure t
    :config
    (setq auto-package-update-delete-old-versions t
          auto-package-update-interval 5)
    (auto-package-update-maybe)
    )
#+END_SRC
* General editor configuration

Here are the tweaks of the more general configuration of Emacs. Such as not creating a lot of backup files, save minibuffer history etc.

** Clock and calendar

As a European I like my extra 12 hours. And we start work on mondays.

#+BEGIN_SRC emacs-lisp :tangle yes

  (setq european-calendar-style 't)
  (setq calendar-week-start-day 1)

#+END_SRC

** Say no to pollute the working directory

This is some old code I found somewhere on the vast wide web. It should probably be updated to actually save some backups somewhere...

#+BEGIN_SRC emacs-lisp :tangle yes

  (setq make-backup-files nil) ; stop creating those backup~ files
  (setq auto-save-default nil) ; stop creating those #autosave# files
  (setq
     backup-by-copying t      ; don't clobber symlinks
     backup-directory-alist
      '(("." . "~/.saves"))    ; don't litter my fs tree
     delete-old-versions t
     kept-new-versions 6
     kept-old-versions 2
     version-control t)       ; use versioned backups

#+END_SRC

** Save minibuffer history such as commands etc.

Some minibuffer settings

#+BEGIN_SRC emacs-lisp :tangle yes

  (savehist-mode t)
  (setq history-length 10)

#+END_SRC

** Creation of directories

This will create the steel-org dir if not existing.
#+BEGIN_SRC emacs-lisp :tangle yes

  (progn
    (if(file-directory-p steel-org-dir)
        (message "org directory already exists.")
      (make-directory steel-org-dir)
      )
    )

#+END_SRC

** Omit warnings

The native compiler speeds up things a great lot. However it is very chatty about warnings, so let's keep it quite please.

#+BEGIN_SRC emacs-lisp :tangle yes

  ;; Dismiss native compilation warnings to pop up everywhere.
  (setq native-comp-async-report-warnings-errors 'silent)

#+END_SRC

** Identation

The big fat indentation list. I usually like to use 2 spaces for indentation, but in indentation controlled languages like Python it better with 4.

#+BEGIN_SRC emacs-lisp :tangle yes
  ;; Defining indentation
  (setq require-final-newline 't)
  (setq tab-width 2)
  (setq standard-indent 2)
  (setq c-basic-indent 2)
  (setq indent-tabs-mode nil)
  (setq-default indent-tabs-mode nil)
  (setq-default c-basic-offset 2)
  (setq-default tab-width 2)
  (setq-default sgml-indent-step 2)
  (setq-default sgml-basic-offset 2)
  (setq c-default-style "linux"
        c-basic-offset 2)
  (setq js-indent-level 2)
  (setq css-indent-offset 2)
  (setq web-mode-code-indent-offset 2)
  (setq web-mode-markup-indent-offset 2)
  (setq js2-basic-offset 2)
  (setq web-mode-css-indent-offset 2)
  (setq nxml-child-indent 2)
  (setq nxml-attribute-indent 2)

  (setq web-mode-markup-indent-offset 2)
  (setq web-mode-css-indent-offset 2)
  (setq web-mode-code-indent-offset 2)
  (setq nxml-child-indent 2)
  (setq nxml-attribute-indent 2)
  (setq nxml-slash-auto-complete-flag t)
  (setq css-indent-offset 2)

  (add-hook 'json-mode-hook
            (lambda()
              (make-local-variable 'js-indent-level)
              (setq js-indent-level 2)
              )
            )
#+END_SRC
* Editor features
** Multi-cursors

https://github.com/magnars/multiple-cursors.el

/"Because sometimes one cursor just ain't enough"/
- Stephen Hawking (or a really good impersonator)

  #+BEGIN_SRC emacs-lisp :tangle yes
  (use-package multiple-cursors
    :ensure t
    :config
    (progn
      (global-set-key (kbd "C-<f1>") 'mc/edit-lines)
      (global-set-key (kbd "C-<f2>") 'mc/insert-numbers)
      (global-set-key (kbd "C-<f5>") 'my-mark-current-word)
      (global-set-key (kbd "C-<f6>") 'mc/mark-next-like-this)
      )
    )
#+END_SRC

** YaSnippets

https://github.com/joaotavora/yasnippet

*YaSnippet* so you easy can use mnemonics for inserting snippets of code PLUS a lot more. Like ascii art?

#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package yasnippet
    :ensure t
    :config
    (setq yas-snippet-dirs '("~/.emacs.d/snippets"))
    (yas-global-mode 1)
    )
#+END_SRC


Ex. Create a new snippet with ~M-x~ =yas/new-snippet=
#+BEGIN_SRC
# -*- mode: snippet -*-
# name: Python generate class
# key: <<pc
# --

# ${1:var_name} works like a form

class ${1:class_name}(object):

$0 # Cursor goes here
#+END_SRC

** Move text

https://github.com/emacsfodder/move-text

There are days you would like to move a section or a line up in code or text. Say hello to move-text.

#+BEGIN_SRC emacs-lisp :tangle yes

  (defun move-text-steel-bindings ()
      "Bind `move-text-up' and `move-text-down' to M-up & M-down."
      (interactive)
      (global-set-key [M-s-down] 'move-text-down)
      (global-set-key [M-s-up]   'move-text-up))

  (use-package move-text
    :ensure t
    :config
    (move-text-steel-bindings)
    )

#+END_SRC

** CHAT GPT shell
https://github.com/xenodium/chatgpt-shell

Use chat-gpt straight in Emacs, or even a local AI model.

#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package chatgpt-shell
    :ensure t
    )

#+END_SRC

** Steel hooks and functions!

Here are some custom hooks, like formatting some files before saving etc.

*Clean up* - white-space before saving an org file
#+BEGIN_SRC emacs-lisp :tangle yes

  (defun steel/org-mode-before-save-hook ()
    "Remove trailing whitespace before saving an Org file."
    (when (eq major-mode 'org-mode)
      (delete-trailing-whitespace)))
  (add-hook 'before-save-hook #'steel/org-mode-before-save-hook)

#+END_SRC

*Make markdown* - After saving a README.org
#+BEGIN_SRC emacs-lisp :tangle yes

  (defun steel/org-export-to-md-on-save ()
    "Automatically export README.org to README.md on save."
    (when (and (string= (buffer-file-name) (expand-file-name "README.org"))
               (eq major-mode 'org-mode))
      (org-md-export-to-markdown)))
  (add-hook 'after-save-hook #'steel/org-export-to-md-on-save)

#+END_SRC

Switch /work or presenter/ mode in org-mode
#+BEGIN_SRC emacs-lisp :tangle yes
  (defun steel/switch-presenter-work-org-mode ()
    (interactive)
    (if steel-org-use-presenter
        (setq steel-org-use-presenter nil)
      (setq steel-org-use-presenter t)
      )
    (steel/set-org-faces)
    )
#+END_SRC

** Steel hot keys

Here are some custom set keybindings, that are global. Keybindings for different modes and features are set under that specific feature.

#+BEGIN_SRC emacs-lisp :tangle yes
  ;; Press CTRL-ALT-r to restart emacs
  (global-set-key (kbd "C-M-r") 'restart-emacs)
  (global-set-key (kbd "C-s-w") 'whitespace-cleanup)
  (global-set-key (kbd "C-M-r") 'restart-emacs)
  (global-set-key (kbd "C-x M-o") 'steel/switch-presenter-work-org-mode)
  (global-set-key (kbd "C-c o a") 'steel/org-agenda)
  (global-set-key (kbd "C-c o c") 'org-capture)
#+END_SRC

* Look and feel

This section coveres the look and feel of Steel Sky. Everything from themes, fonts and more graphical elements of the editor. Plus some tweaks and modifications.

** Install fonts and font-icon pack

Checks whether my favorite fonts are installed, otherwise it will copy it to the user's default font directory and update the font cache.

#+BEGIN_SRC emacs-lisp :tangle yes
  (if(file-directory-p steel-font-dir)
      (message "Local font directory already exists.")
    (make-directory steel-font-dir)
    )

  (defun install-steel-font (font-filename)
    "Install a font from the 'ttf/' directory in Emacs' user directory to steel-font-dir."
    (let* ((src-file (expand-file-name (concat "ttf/" font-filename) user-emacs-directory))
           (dst-file (expand-file-name font-filename steel-font-dir))) ;; Ensure absolute path
      (message "Font: %s" font-filename)
      (if (file-exists-p dst-file)
          (progn
            (message "Font already installed!")
            nil)
        (progn
          (copy-file src-file dst-file nil)  ;; Copy only if not existing
          (message "Font installed successfully!")
          t)))
    )
  ;; Make a list, loop it through and install the fonts
  ;; that are missing.
  (let ((fonts-to-install
         '(
          "roboto.ttf"
          "envy.ttf"
          )))
    (let ((new-files nil))
      (dolist (ft fonts-to-install)
        (progn
          (if (install-steel-font ft)
              (setq new-files t)
            )
          )
        )
      (if new-files
          (shell-command "fc-cache -f" nil)
        )
      )
    )
#+END_SRC

*All the icons*
https://github.com/domtronn/all-the-icons.el
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package all-the-icons
    :ensure t
    :config
    (when (and (not (file-exists-p "~/.emacs.d/.install-flags/all-the-icon-fonts-installed.flag"))
               (package-installed-p 'all-the-icons))
      (message "Running post-install setup for some-package...")
      (all-the-icons-install-fonts t)
      (write-region "Installed\n" nil "~/.emacs.d/.install-flags/all-the-icon-fonts-installed.flag"))
    )
#+END_SRC

*nerd-icons*
https://github.com/rainstormstudio/nerd-icons.el
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package nerd-icons
    :ensure t
    :config
    (when (and (not (file-exists-p "~/.emacs.d/.install-flags/nerd-icons-fonts-installed.flag"))
               (package-installed-p 'nerd-icons))
      (message "Running post-install setup for some-package...")
      (nerd-icons-install-fonts t)
      (write-region "Installed\n" nil "~/.emacs.d/.install-flags/nerd-icons-fonts-installed.flag"))
    )
#+END_SRC

** Install theming

Installs an array of different themes.

#+BEGIN_SRC emacs-lisp :tangle yes
  ;; Cool themes,
  ;; spacemacs-dark
  ;; base16-mocha
  ;; doom-laserwave
  ;; doom-city-lights
  ;; base16-gruvbox-material-dark-hard
  ;; base16-catppuccin-mocha
  (setq chtheme steel-theme)

  (use-package base16-theme
    :ensure t
    )
  (use-package doom-themes
    :ensure t
    )
  (use-package birds-of-paradise-plus-theme
    :ensure t
    )
  (use-package ewal
    :ensure t
    :init (setq ewal-use-built-in-always-p nil
                ewal-use-built-in-on-failure-p t
                ewal-built-in-palette "sexy-material"))

  (use-package ewal-spacemacs-themes
    :ensure t
    :init (progn
            (setq spacemacs-theme-underline-parens t
                  my:rice:font (font-spec
                                :family steel-code-font
                                :weight 'semi-bold
                                :size 12.0))
            (show-paren-mode +1)
            ;;(global-hl-line-mode)
            (set-frame-font my:rice:font nil t)
            (add-to-list  'default-frame-alist
                          `(font . ,(font-xlfd-name my:rice:font))))
    :config (progn
              (load-theme chtheme t)
              (enable-theme chtheme )))

  (use-package ewal-evil-cursors
    :ensure t
    :after (ewal-spacemacs-themes)
    :config (ewal-evil-cursors-get-colors
             :apply t :spaceline t))

#+END_SRC

** Set background opacity

This changes the opacity the background in the buffers.

#+BEGIN_SRC emacs-lisp :tangle yes

  (defun steel/transparency()
    (set-frame-parameter (selected-frame) 'alpha `(,steel-opacity . 100))
    )

  (if (daemonp)
      (add-hook 'after-make-frame-functions
                (lambda (frame)
                  (with-selected-frame frame
                    (steel/transparency))))
    (steel/transparency)
    )

  ;;(add-to-list 'default-frame-alist (steel/transparency))

#+END_SRC

** Doom-modeline
https://github.com/seagle0128/doom-modeline

Doom modeline looks sleek. Let's install.

#+BEGIN_SRC emacs-lisp :tangle yes

  (use-package doom-modeline
    :ensure t
    :hook (after-init . doom-modeline-mode)
  )
  (setq doom-modeline-height 40)
  (setq doom-modeline-time-analogue-clock nil)

#+END_SRC

*** Time

Shows the time in 24hr format.

#+BEGIN_SRC emacs-lisp :tangle yes
  (setq display-time-24hr-format t)
  (setq display-time-default-load-average nil)
  (setq display-time-mail-directory nil)
  (display-time-mode 1)
#+END_SRC
*** Battery

Show battery information if enabled

#+BEGIN_SRC emacs-lisp :tangle yes

  (display-battery-mode t)

#+END_SRC

** Line numbers

Coding with line numbers is a joy and a priviledge!

#+BEGIN_SRC emacs-lisp :tangle yes
  ;; Alternatively, to use it only in programming modes:
  (add-hook 'prog-mode-hook #'display-line-numbers-mode)
#+END_SRC

** Column mode

Shows which column number you are on.

#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package column-number
    :ensure nil
    :hook (after-init . column-number-mode)
    )
#+END_SRC

** Hide buffers

Get rid of **Messages* *Completions** while sometimes informative, mostly annoying. And bypassing the startup message, since we want to use the dashboard.

#+BEGIN_SRC emacs-lisp :tangle yes
  ;; Removes *messages* from the buffer.
  ;;(setq-default message-log-max nil)
  ;;(kill-buffer "*Messages*")

  ;; Only quick swap buffers that are a file.
  (set-frame-parameter (selected-frame) 'buffer-predicate #'buffer-file-name)

  ;; Alternatively
  ;;(set-frame-parameter (selected-frame) 'buffer-predicate
  ;;(lambda (buf) (not (string-match-p "^*" (buffer-name buf)))))
  ;; Removes *Completions* from buffer after you've opened a file.
  (add-hook 'minibuffer-exit-hook
            #'(lambda ()
                (let ((buffer "*Completions*"))
                  (and (get-buffer buffer)
                       (kill-buffer buffer)))))


  ;; Disabled *Completions*
  (add-hook 'minibuffer-exit-hook
            #'(lambda ()
                (let ((buffer "*Completions*"))
                  (and (get-buffer buffer)
                       (kill-buffer buffer)))))

  (setq inhibit-startup-message t)   ; Don't want any startup message
  #+END_SRC

** Get rid off menu bar and Scrollbars and set

In order to create a focused environment with out any other distractions than text, the menu and scrollbars has to go.

#+BEGIN_SRC emacs-lisp :tangle yes
  (menu-bar-mode -99)
  (tool-bar-mode 0)
  ;; No scrollbars!
  (scroll-bar-mode -1)
#+END_SRC

* Setting up faces

Here are all the face settings defined. Also a hook that hopefully enables emacs-daemon to render the fonts correctly.

#+BEGIN_SRC emacs-lisp :tangle yes

  (defun steel/set-org-faces ()
    (setq steel-org-base-size 140)
    (setq steel-org-code-size 0.8)
    (setq steel-org-code-head 0.8)

    (when steel-org-use-presenter
        (progn
          (setq steel-org-base-size 270)
          (setq steel-org-code-size 0.7)
          (setq steel-org-code-head 0.6)
          )
      )
    (eval steel-org-use-presenter)
    (set-face-attribute 'variable-pitch nil :family "Roboto" :weight 'light :height steel-org-base-size)
    ;; Set the sizes of the headings
    (dolist (face '((org-level-1 . 1.45)
                    (org-level-2 . 1.2)
                    (org-level-3 . 1.0)
                    (org-level-4 . 0.9)
                    (org-level-5 . 0.9)
                    (org-level-6 . 0.9)
                    (org-level-7 . 0.9)
                    (org-level-8 . 0.9)))
      (set-face-attribute (car face) nil
                          :font steel-org-font
                          :weight 'light
                          :height (cdr face))
      )
    (set-face-attribute 'org-block nil :family steel-code-font :height steel-org-code-size)
    (set-face-attribute 'org-block-begin-line nil
                        :family steel-code-font
                        :height steel-org-code-head
                        :foreground "goldenrod"
                        :background "#0e191c"
                        :box
                        '(:line-width (20 . 20) :color "#0e191c" :style nil)
                        )
    (set-face-attribute 'org-block-end-line nil
                        :family steel-code-font
                        :height steel-org-code-head
                        :foreground "dark violet"
                        :background "#0e191c"
                        :box
                        '(:line-width (20 . 20) :color "#0e191c" :style nil)
                        )

    (set-face-attribute 'italic nil :underline nil)
    (set-face-attribute 'org-link nil :weight 'light )
    (set-face-attribute 'org-verbatim nil :inherit '(shadow fixed-pitch) :height 0.85 )
    (set-face-attribute 'org-special-keyword nil :inherit '(font-lock-comment-face fixed-pitch))
    (set-face-attribute 'org-meta-line nil :inherit '(font-lock-comment-face fixed-pitch))
    (set-face-attribute 'org-checkbox nil :inherit 'fixed-pitch)
    (set-face-attribute 'org-document-title nil :font steel-org-font :height 1.9 )
    (set-face-attribute 'font-lock-comment-delimiter-face nil :background nil)
    (set-face-attribute 'font-lock-comment-face nil :background nil :foreground "#888888" )
    )

  (if (daemonp)
      (add-hook 'after-make-frame-functions
                (lambda (frame)
                  (with-selected-frame frame
                    (steel/set-org-faces))))
    (steel/set-org-faces)
    )

  (add-hook 'after-init-hook #'steel/set-org-faces)

#+END_SRC
* Dashboard

https://github.com/emacs-dashboard/emacs-dashboard
A custom start page if nothing else is wanted.

#+BEGIN_SRC emacs-lisp :tangle yes

  (use-package dashboard
    :ensure t
    :config
    (dashboard-setup-startup-hook)
    :custom
    (dashboard-week-agenda t)
    (dashboard-remove-tags t)
    (dashboard-agenda-prefix-format  "%i %s ")
    (dashboard-center-content t)
    (dashboard-agenda-sort-strategy '(time-up))
    (dashboard-match-agenda-entry
     "TODO=\"TODO\"|TODO=\"EVENT\"|TODO=\"BIRTHDAY\"")
    (dashboard-agenda-prefix-format " ")
    (dashboard-icon-type 'all-the-icons)
    (dashboard-banner-logo-title "Steel sky 0.2.7")
    (dashboard-set-heading-icons t)
    (dashboard-set-file-icons t)
    (dashboard-startup-banner "~/.emacs.d/img/logo-medium.png")
    (dashboard-items
     '(
       (recents  . 5)
       (projects . 5)
       )
     )
    (dashboard-init-info "\"Steel sky\" a flavour of emacs with a hint of fresh blue skies, coffee and rusty steel. Edit ~/.emacs.d/steel.org")
    (dashboard-footer-messages '("Keep up the good work!"))

    )

  (if (< (length command-line-args) 2)
      (setq initial-buffer-choice (lambda () (get-buffer "*dashboard*")))
    )

#+END_SRC

* Window navigation

Packages that are making navigation between different windows easier.

** Windmove

Rejoice! Gone are the days of /`C-x o`/.  When having many areas open this neat feature comes very useful.

#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package windmove
    :ensure nil
    :bind*
    (("C-s-<left>" . windmove-left)
     ("C-s-<right>" . windmove-right)
     ("C-s-<up>" . windmove-up)
     ("C-s-<down>" . windmove-down)
     ;;(windmove-default-keybindings)
     )
    )
#+END_SRC

** Winner

It's easy to mess things up especially if you have a nice window layout. That's why winner was invented and people rejoiced. Finally we are all winners.

#+BEGIN_SRC emacs-lisp :tangle yes

  (use-package winner
      :ensure nil
      :config (winner-mode t)
      )

#+END_SRC

** Golden-Ratio
https://github.com/roman/golden-ratio.el

Golden ratio slightly enlarges an active window. Useful when working with smaller screen sizes.

#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package golden-ratio
    :ensure t
    :config
    (setq golden-ratio-auto-scale t)
    (golden-ratio-mode 1)
    )
#+END_SRC

* Linting, language servers and auto complete

Settings for all the different autocomplete and linting features.

** Company mode
https://company-mode.github.io/

The interface for *autocomplete* and a lot more.

#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package company
    :ensure t
    :config
    (global-company-mode t)
    (setq
     company-idle-delay 0.5
     company-minimum-prefix-length 0
     company-tooltip-offset-display 'lines
     company-tooltip-flip-when-above t
     company-insertion-on-trigger nil
     )

    (define-key company-active-map (kbd "\C-n") 'company-select-next)
    (define-key company-active-map (kbd "\C-p") 'company-select-previous)
    (define-key company-active-map (kbd "\C-d") 'company-show-doc-buffer)
    (define-key company-active-map (kbd "M-.") 'company-show-location)
    )
#+END_SRC
** LSP mode and ruff
https://github.com/emacs-lsp/lsp-mode
Support for language servers, such as pyright and ruff (only linting)
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package lsp-mode
    :ensure t
    :init (add-to-list 'company-backends 'company-capf)
    :config
    (setq lsp-pyright-langserver-command "basedpyright"
          lsp-ui-doc-show-with-mouse t
          lsp-ui-doc-position 'at-point
          lsp-pylsp-plugins-ruff-enabled t
          lsp-pylsp-plugins-mypy-enabled t
          lsp-pylsp-plugins-rope-autoimport-enabled t
          lsp-headerline-breadcrum-enable t
          lsp-headerline-breadcrumb-enable-diagnostics nil
          lsp-headerline-breadcrumb-icons-enable t
          )
    )


  (use-package lsp-ui
    :ensure t
    )

  (use-package lsp-treemacs
    :ensure t
    )

  (use-package lsp-pyright
    :ensure t
    )

  (use-package ruff-format
    :ensure t
    )
#+END_SRC

** FlyCheck
https://www.flycheck.org/en/latest/
A detailed linter frontend.
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package flycheck
    :ensure t
    :init (global-flycheck-mode)
    :config
    (setq
     flycheck-display-errors-delay 10
     flycheck-auto-display-errors-after-checking nil
     )
    ;; '(flycheck-check-syntax-automatically (quote
    ;;                                        (save idle-change mode-enabled)))
    ;; '(flycheck-idle-change-delay 8) ;; Set delay based on what suits you the best
    ;; )
    )
    #+END_SRC
* Org-mode

https://orgmode.org/

This section covers everything about org-mode, the purpose of Emacs and the purpose of life.

** Olivetti

Puts org mode in center for *better writing experience*.
Like a typewriter, such as...

#+BEGIN_SRC emacs-lisp :tangle yes

  (use-package olivetti
    :ensure t
    :init
    (setq olivetti-body-width 0.4)
    )

#+END_SRC

** Org mode

https://orgmode.org/

The main reason for Emacs? The purpose of life?
org-mode is nowadays bundled with Emacs. But I also added some extra packages.

#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package org
    :pin gnu
    :mode (("\\.org$" . org-mode))
    :hook
    (org-mode . olivetti-mode)
    (org-mode . visual-line-mode)
    (org-mode . org-indent-mode)
    (org-mode . variable-pitch-mode)
    :config
    (setq org-hide-leading-stars t)
    (setq org-hide-emphasis-markers t)
    (add-hook 'org-agenda-finalize-hook #'org-modern-agenda)
    )


#+END_SRC
** Babel
#+BEGIN_SRC emacs-lisp :tangle yes
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((emacs-lisp . t)  ;; Always enabled
     (python . t)      ;; Enable Python
     (shell . t)       ;; Enable Shell scripting
     (js . t)          ;; Enable JavaScript
     (sql . t)         ;; Enable SQL
     (C . t)))         ;; Enable C/C++
    (setq org-babel-python-command "python3")

#+END_SRC

** Agenda setup


#+BEGIN_SRC emacs-lisp :tangle yes

  (setq org-agenda-prefix-format '((agenda . " %i %t")))
  (setq org-agenda-skip-scheduled-if-done t)
  (setq org-agenda-start-with-log-mode t)


#+END_SRC

** org-modern

https://github.com/minad/org-modern

Some cosmetic /improvements/ of org-mode. Like bullet-points and a more neater src block.

#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package org-modern
    :ensure t
    :config
    (setq org-startup-folded t
          org-auto-align-tags t
          org-pretty-entities nil
          org-tags-column 0
          org-fold-catch-invisible-edits 'show-and-error
          org-special-ctrl-a/e t
          org-insert-heading-respect-content t
          ;; Don't style the following
          org-modern-tag nil
          org-modern-priority t
          org-modern-todo t
          org-modern-table t
          org-modern-star 'replace
          ;;org-modern-replace-stars t
          org-modern-hide-stars nil
          org-ellipsis "…"
          ;; Agenda styling
          org-agenda-tags-column 0
          org-agenda-block-separator ?─
          org-agenda-time-grid
          '((daily today require-timed)
            (800 1000 1200 1400 1600 1800 2000)
            " ┄┄┄┄┄ " "┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄")
          org-agenda-current-time-string
          "⭠ now ─────────────────────────────────────────────────")
    (global-org-modern-mode)
    )
#+END_SRC

** org-roam

Org-roam is supposed to be like a extended mind of org-documents. Not tested fully yet.

#+BEGIN_SRC emacs-lisp :tangle yes

  (use-package org-roam
      :ensure t
      :custom
      (org-roam-directory steel-org-dir)
      (org-roam-completion-everywhere t)
      :bind (
             ("C-c n l" . org-roam-buffer-toggle)
             ("C-c n f" . org-roam-node-find)
             ("C-c n i" . org-roam-node-insert)
             :map org-mode-map
             ("C-M-i" . completion-at-point)
             )
      :config
      (org-roam-setup)
      )

#+END_SRC

** Org-roam-ui

Provides a graphical view (in browser, of all the different nodes)

#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package org-roam-ui
    :ensure t
    )
#+END_SRC

* File system navigation

This section covers file managers and file system navigation. Both Treemacs and Helm.

** Treemacs

https://github.com/Alexander-Miller/treemacs

File / Projectbrowser, can look into files and everything!
This section contains all the configurable parameters.

#+BEGIN_SRC emacs-lisp :tangle yes

  (use-package treemacs
    :ensure t
    :defer t
    :init
    (with-eval-after-load 'winum
      (define-key winum-keymap (kbd "M-0") #'treemacs-select-window))
    :config
    (progn
      (setq treemacs-collapse-dirs                   (if treemacs-python-executable 3 0)
            treemacs-deferred-git-apply-delay        0.5
            treemacs-directory-name-transformer      #'identity
            treemacs-display-in-side-window          t
            treemacs-eldoc-display                   'simple
            treemacs-file-event-delay                2000
            treemacs-file-extension-regex            treemacs-last-period-regex-value
            treemacs-file-follow-delay               0.2
            treemacs-file-name-transformer           #'identity
            treemacs-follow-after-init               t
            treemacs-expand-after-init               t
            treemacs-find-workspace-method           'find-for-file-or-pick-first
            treemacs-git-command-pipe                ""
            treemacs-goto-tag-strategy               'refetch-index
            treemacs-header-scroll-indicators        '(nil . "^^^^^^")
            treemacs-hide-dot-git-directory          t
            treemacs-indentation                     2
            treemacs-indentation-string              " "
            treemacs-is-never-other-window           nil
            treemacs-max-git-entries                 5000
            treemacs-missing-project-action          'ask
            treemacs-move-files-by-mouse-dragging    t
            treemacs-move-forward-on-expand          nil
            treemacs-no-png-images                   nil
            treemacs-no-delete-other-windows         t
            treemacs-project-follow-cleanup          nil
            treemacs-persist-file                    (expand-file-name ".cache/treemacs-persist" user-emacs-directory)
            treemacs-position                        'left
            treemacs-read-string-input               'from-child-frame
            treemacs-recenter-distance               0.1
            treemacs-recenter-after-file-follow      nil
            treemacs-recenter-after-tag-follow       nil
            treemacs-recenter-after-project-jump     'always
            treemacs-recenter-after-project-expand   'on-distance
            treemacs-litter-directories              '("/node_modules" "/.venv" "/.cask")
            treemacs-project-follow-into-home        nil
            treemacs-show-cursor                     nil
            treemacs-show-hidden-files               t
            treemacs-silent-filewatch                nil
            treemacs-silent-refresh                  nil
            treemacs-sorting                         'alphabetic-asc
            treemacs-select-when-already-in-treemacs 'move-back
            treemacs-space-between-root-nodes        t
            treemacs-tag-follow-cleanup              t
            treemacs-tag-follow-delay                1.5
            treemacs-text-scale                      nil
            treemacs-user-mode-line-format           nil
            treemacs-user-header-line-format         nil
            treemacs-wide-toggle-width               70
            treemacs-width                           35
            treemacs-width-increment                 1
            treemacs-width-is-initially-locked       t
            treemacs-workspace-switch-cleanup        nil)

      ;; The default width and height of the icons is 22 pixels. If you are
      ;; using a Hi-DPI display, uncomment this to double the icon size.
      ;;(treemacs-resize-icons 44)

      (treemacs-follow-mode t)
      (treemacs-filewatch-mode t)
      (treemacs-fringe-indicator-mode 'always)
      (when treemacs-python-executable
        (treemacs-git-commit-diff-mode t))

      (pcase (cons (not (null (executable-find "git")))
                   (not (null treemacs-python-executable)))
        (`(t . t)
         (treemacs-git-mode 'deferred))
        (`(t . _)
         (treemacs-git-mode 'simple)))

      (treemacs-hide-gitignored-files-mode nil))
    :bind
    (:map global-map
          ("M-0"       . treemacs-select-window)
          ("C-x t 1"   . treemacs-delete-other-windows)
          ("C-x t t"   . treemacs)
          ("<f5>"      . treemacs)
          ("C-x t d"   . treemacs-select-directory)
          ("C-x t B"   . treemacs-bookmark)
          ("C-x t C-t" . treemacs-find-file)
          ("C-x t M-t" . treemacs-find-tag)))

  (use-package treemacs-evil
    :after (treemacs evil)
    :ensure t)

  (use-package treemacs-projectile
    :after (treemacs projectile)
    :ensure t)

  (use-package treemacs-icons-dired
    :hook (dired-mode . treemacs-icons-dired-enable-once)
    :ensure t)

  (use-package treemacs-magit
    :after (treemacs magit)
    :ensure t)

  (use-package treemacs-persp
    ;;treemacs-perspective if you use perspective.el vs. persp-mode
    :after (treemacs persp-mode) ;;or perspective vs. persp-mode
    :ensure t
    :config (treemacs-set-scope-type 'Perspectives))

  (use-package treemacs-tab-bar ;;treemacs-tab-bar if you use tab-bar-mode
    :after (treemacs)
    :ensure t
    :config (treemacs-set-scope-type 'Tabs))

#+END_SRC

** Helm
https://emacs-helm.github.io/helm/

The nifty file browser and interface enhancer

#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package helm-icons
    :ensure t
    :config
    (setq helm-icons-provider 'all-the-icons)
    )

  (helm-icons-enable)
  (use-package helm
    :ensure t
    :config
    (setq helm-split-window-inside-p t
          helm-use-frame-when-more-than-two-windows nil
          helm-autoresize-mode t
          helm-visible-mark-prefix "✓"
          )
    (helm-autoresize-mode t)
    )

  (use-package helm-mode
    :config (helm-mode 1))

  (use-package helm-command
    :bind (("M-x" . helm-M-x)))

  (use-package helm-files
    :bind (("C-x C-f" . helm-find-files)))

  (use-package helm-buffers
    :bind (("C-x C-b" . helm-buffers-list)
           ("M-s m" . helm-mini)
           )
    :config (setq helm-buffer-max-length nil))

  (use-package helm-occur
    :bind (("M-s o" . helm-occur)))

  (use-package helm-imenu
    :bind (("M-s i" . helm-imenu))
    :config (setq imenu-max-item-length 120))

  (use-package helm-bookmarks
    :bind (("M-s b" . helm-bookmarks)))

  (add-to-list 'helm-completion-styles-alist '(python-mode . (emacs helm helm-flex)))

  (setq helm-display-function 'helm-display-buffer-in-own-frame
        helm-display-buffer-reuse-frame t
        helm-use-undecorated-frame-option nil ;; CH from t
        helm-display-buffer-width 110
        )

  (use-package helm-posframe
    :ensure t
    :config
    (setq
     helm-posframe-width 140
     )
    )
  (helm-posframe-enable)
#+END_SRC

* Languages and formats

Here are all the particular settings for each language mode. Some of them are using a language server such as basedpyright and linters such as ruff.

** Python mode

This mode is depending on that you are using virtual environments with the venv in the directory `.venv`.

#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package python
    :hook
    (python-mode . lsp-mode)
    (python-mode . ruff-format-on-save-mode)
    (python-mode . display-fill-column-indicator-mode)
   )

  (use-package pyvenv
    :ensure t
    :config
    (pyvenv-mode t)
    (setq pyvenv-post-activate-hooks
          (list (lambda ()
                  (setq python-shell-interpreter
                        (concat pyvenv-virtual-env "bin/ipython")
                        ))))
    (setq pyvenv-post-deactivate-hooks
          (list (lambda ()
                  (setq python-shell-interpreter "python3"))))
    )

  ;; Put the column indicator at line 80
  (add-hook 'python-mode-hook
            (lambda ()
              (set-fill-column 80)
              )
            )
#+END_SRC

** LUA
https://github.com/immerrr/lua-mode

Some basic support for LUA

#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package lua-mode
    :ensure t
    :mode "\\.lua\\'"
    :interpreter "lua"
    )
#+END_SRC

** RUST
https://github.com/rust-lang/rust-mode

Rudimentary Rust support

#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package rust-mode
    :ensure t
    :config
    (setq rust-format-on-save t)
    :hook
    ;;(rust-mode . lsp-mode)
    (rust-mode . prettify-symbols-mode)
    )
#+END_SRC

** Web Mode
https://web-mode.org/

What a beast of a mode! Supports HTML, CSS, Javascript!
Has not been configured yet...

#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package web-mode
    :ensure t
    )
#+END_SRC

** Conf mode

We would also like to use conf-mode on some system config files like systemd files.

#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package conf-mode
    :mode (
           "\\.service?\\'"
           "\\.timer?\\'"
           "\\.env\\'"
           )
    )
#+END_SRC

** Markdown mode
https://jblevins.org/projects/markdown-mode/

A lesser format than .org, but it's used everywhere


#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package markdown-mode
    :ensure t
    :mode ("\\.md$'" . gfm-mode)
    :init (setq markdown-command "multimarkdown"))
  (use-package markdown-preview-eww
    :ensure t
    )
#+END_SRC
* Unused

Packages that are not active for different reasons. Could be buggy or just not needed at the moment. But placed here to be served as a reminder of their existence.

** COMMENT Eglot
I had a hard time getting Eglot to work nicely. Even though it should be more effecient.
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package eglot
    :ensure t
    :defer t
    :hook (
           (python-mode . eglot-ensure)
           (rust-mode . eglot-ensure))
    :config
    (add-to-list 'eglot-server-programs
                 `(python-mode
                   . ,(eglot-alternatives '(
                                            ("basedpyright-langserver" "--stdio")
                                            ))))
    )

  (use-package flymake-ruff
    :ensure t
    :hook(eglot-managed-mode . flymake-ruff-load)
    )
#+END_SRC
** COMMENT Projectile
I had projectile installed in the past. But I'm wondering if it is needed?
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package projectile
    :ensure t
    :init
    (projectile-mode +1)
    :bind-keymap ("C-c p" . projectile-command-map)
    )
#+END_SRC

* Misc
** List of things to fix

It would be cool if the following could be fixed
+ [X]  Fix the annoying font issue when running emacs as a client, see here: https://systemcrafters.net/emacs-tips/using-the-emacs-daemon/#configuring-the-ui-for-new-frames
+ [ ]  Fix the annoying lint messages in the Python buffer.
+ [ ]  Make rust mode a great experience, with linting and auto-complete.
** Look into the followin packages
+ org-download - downloads images and stuff
+ openwith-mode - makes emacs open files in the correct applications
+ ob-mermaid - making flowchats, diagrams etc...
+ org-transclucent - stich org files together as one file (virtually)
+ org-super-agenda - super mode?
+ org-timeblock - time table of a day
** COMMENT Elisp examples
#+BEGIN_SRC emacs-lisp :tangle yes

  ;; To create something like a struct
  (setq person (list :name "Alice" :age 30 :city "New York"))
  (plist-get person :name)  ;; => "Alice"

  ;; Or hash-tables
  (setq person (make-hash-table :test 'equal))
  (puthash "name" "Alice" person)
  (puthash "age" 30 person)
  (gethash "name" person) ;; => "Alice"

  (set-face-attribute 'font-lock-comment-delimiter-face nil :background nil)
  (set-face-attribute 'font-lock-comment-face nil :background nil :foreground "#444444" )
#+END_SRC
