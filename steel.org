* Steel Sky Config
** Heading
#+BEGIN_SRC emacs-lisp :tangle yes
  ;;; Steel sky config
  ;;; This config is generated from steel.org please edit that fine instead.
#+END_SRC
** Save files
#+BEGIN_SRC emacs-lisp :tangle yes
(setq make-backup-files nil) ; stop creating those backup~ files
(setq auto-save-default nil) ; stop creating those #autosave# files

(setq
   backup-by-copying t      ; don't clobber symlinks
   backup-directory-alist
    '(("." . "~/.saves"))    ; don't litter my fs tree
   delete-old-versions t
   kept-new-versions 6
   kept-old-versions 2
   version-control t)       ; use versioned backups
#+END_SRC
** Put savefiles somewhere else, not polluting the directory
#+BEGIN_SRC emacs-lisp :tangle yes
(setq make-backup-files nil) ; stop creating those backup~ files
(setq auto-save-default nil) ; stop creating those #autosave# files
(setq
   backup-by-copying t      ; don't clobber symlinks
   backup-directory-alist
    '(("." . "~/.saves"))    ; don't litter my fs tree
   delete-old-versions t
   kept-new-versions 6
   kept-old-versions 2
   version-control t)       ; use versioned backups
#+END_SRC

** General functionality
*** Save minibuffer history such as commands etc.
#+BEGIN_SRC emacs-lisp :tangle yes
(savehist-mode t)
(setq history-length 5)
#+END_SRC
** Identation
#+BEGIN_SRC emacs-lisp :tangle yes
  ;; Defining indentation
  (setq european-calendar-style 't)  ; European style calendar
  (setq calendar-week-start-day 1)
  (setq require-final-newline 't)
  (setq tab-width 2)
  (setq standard-indent 2)
  (setq c-basic-indent 2)
  (setq indent-tabs-mode nil)
  (setq-default indent-tabs-mode nil)
  (setq-default c-basic-offset 2)
  (setq-default tab-width 2)
  (setq-default sgml-indent-step 2)
  (setq-default sgml-basic-offset 2)
  (setq c-default-style "linux"
        c-basic-offset 2)
  (setq js-indent-level 2)
  (setq css-indent-offset 2)
  (setq web-mode-code-indent-offset 2)
  (setq web-mode-markup-indent-offset 2)
  (setq js2-basic-offset 2)
  (setq web-mode-css-indent-offset 2)
  (setq nxml-child-indent 2)
  (setq nxml-attribute-indent 2)

  (setq web-mode-markup-indent-offset 2)
  (setq web-mode-css-indent-offset 2)
  (setq web-mode-code-indent-offset 2)
  (setq nxml-child-indent 2)
  (setq nxml-attribute-indent 2)
  (setq nxml-slash-auto-complete-flag t)
  (setq css-indent-offset 2)

  (add-hook 'json-mode-hook
            (lambda()
              (make-local-variable 'js-indent-level)
              (setq js-indent-level 2)
              )
            )

#+END_SRC

** Font config
#+BEGIN_SRC emacs-lisp :tangle yes
  (if(file-directory-p "~/.local/share/fonts")
     (message "Local font directory already exists.")
    (make-directory "~/.local/share/fonts")
     )

  (if(file-exists-p "~/.local/share/fonts/envy.ttf")
      (progn
	(message "Font already installed!")
	)
    (progn
      (copy-file (expand-file-name "ttf/envy.ttf" user-emacs-directory)  "~/.local/share/fonts/" nil)
      (shell-command "fc-cache -f -v" t)
      )
    )

 #+END_SRC

** Install required packages
#+BEGIN_SRC emacs-lisp :tangle yes
  (require 'package)
  ;; register a upgrade package handler

  ;; Adds the repositories
  (setq package-archives '(("gnu" . "https://elpa.gnu.org/packages/")
                           ("melpa" . "https://melpa.org/packages/")))

  (defvar custom/packages '(use-package
                             )
    "A list of packages to ensure are installed at launch.")

  (defun custom/packages-installed-p ()
    (cl-loop for pkg in custom/packages
             when (not (package-installed-p pkg)) do (cl-return nil)
             finally (cl-return t)))

  (unless (custom/packages-installed-p)
    (when (not package-archive-contents)
      (message "%s" "Refreshing package database...")
      (package-refresh-contents)
      (dolist (pkg custom/packages)
        (when (not (package-installed-p pkg))
          (package-install pkg)))))
  (provide 'custom/packages)

  ;;(setq package-install-upgrade-built-in t)
  ;;(package-upgrade 'seq)
  #+END_SRC

** Install theming
#+BEGIN_SRC emacs-lisp :tangle yes

      (use-package base16-theme
        :ensure t
        )

      (use-package birds-of-paradise-plus-theme
        :ensure t
        )
      (use-package ewal
        :ensure t
        :init (setq ewal-use-built-in-always-p nil
                    ewal-use-built-in-on-failure-p t
                    ewal-built-in-palette "sexy-material"))
      (use-package ewal-spacemacs-themes
        :ensure t
        :init (progn
                (setq spacemacs-theme-underline-parens t
                      my:rice:font (font-spec
                                    :family "Envy Code R"
                                    :weight 'semi-bold
                                    :size 12.0))
                (show-paren-mode +1)
                (global-hl-line-mode)
                (set-frame-font my:rice:font nil t)
                (add-to-list  'default-frame-alist
                              `(font . ,(font-xlfd-name my:rice:font))))
        :config (progn
                  (load-theme 'base16-mocha t)
                  (enable-theme 'base16-mocha )))
  (use-package ewal-evil-cursors
    :ensure t
    :after (ewal-spacemacs-themes)
    :config (ewal-evil-cursors-get-colors
             :apply t :spaceline t))
  (use-package spaceline
    :ensure t
    :after (ewal-evil-cursors winum)
    :init (setq powerline-default-separator nil)
    :config (spaceline-spacemacs-theme))

;;  (use-package spaceline-all-the-icons
;;      :ensure t
;      :after spaceline
;;      :config
;;      (spaceline-all-the-icons-theme)
;;      )
#+END_SRC

** Multicursors
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package multiple-cursors
    :ensure t
    :config
    (progn
      (global-set-key (kbd "C-<f1>") 'mc/edit-lines)
      (global-set-key (kbd "C-<f2>") 'mc/insert-numbers)
      (global-set-key (kbd "C-<f5>") 'my-mark-current-word)
      (global-set-key (kbd "C-<f6>") 'mc/mark-next-like-this)
      )
    )
#+END_SRC

** Icons
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package all-the-icons
    :ensure t
    :config
    (when (and (not (file-exists-p "~/.emacs.d/.install-flags/all-the-icon-fonts-installed.flag"))
               (package-installed-p 'all-the-icons))
      (message "Running post-install setup for some-package...")
      (all-the-icons-install-fonts t)
      (write-region "Installed\n" nil "~/.emacs.d/.install-flags/all-the-icon-fonts-installed.flag"))
    )

    #+END_SRC

** Hide buffers
Get rid of *Messages* *Completions* while sometimes informative, mostly annoying.
#+BEGIN_SRC emacs-lisp :tangle yes
  ;; Removes *messages* from the buffer.
  ;;(setq-default message-log-max nil)
  ;;(kill-buffer "*Messages*")

  ;; Removes *Completions* from buffer after you've opened a file.
  (add-hook 'minibuffer-exit-hook
  #'(lambda ()
     (let ((buffer "*Completions*"))
       (and (get-buffer buffer)
      (kill-buffer buffer)))))


  ;; Disabled *Completions*
  (add-hook 'minibuffer-exit-hook
      #'(lambda ()
    (let ((buffer "*Completions*"))
      (and (get-buffer buffer)
           (kill-buffer buffer)))))
  (setq inhibit-startup-message t)   ; Don't want any startup message

  #+END_SRC

** Line numbers
Mmhmmm line number, we love them and hate them. Add the mode you
dislike them in in the *disable-modes-list*
#+BEGIN_SRC emacs-lisp :tangle yes
  ;; Alternatively, to use it only in programming modes:
  (add-hook 'prog-mode-hook #'display-line-numbers-mode)
#+END_SRC

** Get rid off menu bar and Scrollbars
The menubar has to go! Bye!
#+BEGIN_SRC emacs-lisp :tangle yes
(menu-bar-mode -99)
(tool-bar-mode 0)

;; No scrollbars!
(scroll-bar-mode -1)

#+END_SRC

** Org Mode
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package org
       :pin gnu
       :mode (("\\.org$" . org-mode))
       :config
     (progn
       (add-hook 'org-mode-hook #'org-modern-mode)
       (add-hook 'org-agenda-finalize-hook #'org-modern-agenda)

     ))
  (use-package org-modern
    :ensure t
    :config
    (progn
      (setq
       org-auto-align-tags nil
       org-tags-column 0
       org-catch-invisible-edits 'show-and-error
       org-special-ctrl-a/e t
       org-insert-heading-respect-content t
       org-hide-emphasis-markers t
       org-pretty-entities t
       org-agenda-tags-column 0
       org-ellipsis "â€¦"
       )
      )
    )


#+END_SRC

** Markdown mode
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package markdown-mode
    :ensure t
    :mode ("\\.md$'" . gfm-mode)
    :init (setq markdown-command "multimarkdown"))
  (use-package markdown-preview-eww
    :ensure t
    )
#+END_SRC

** Company MODE
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package company
    :ensure t
    :config
    (global-company-mode t)
    (setq company-idle-delay 0.1)
    (setq company-minimum-prefix-length 1)
    (setq company-tooltip-offset-display 'lines)
    (setq company-tooltip-flip-when-above t)
    (define-key company-active-map (kbd "\C-n") 'company-select-next)
    (define-key company-active-map (kbd "\C-p") 'company-select-previous)
    (define-key company-active-map (kbd "\C-d") 'company-show-doc-buffer)
    (define-key company-active-map (kbd "M-.") 'company-show-location)
    )
#+END_SRC
** LSP mode and ruff
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package lsp-mode
    :ensure t
    :config
    (setq lsp-pyright-langserver-command "basedpyright"
          lsp-ui-doc-show-with-mouse t
          lsp-ui-doc-position 'at-point
          lsp-pylsp-plugins-ruff-enabled t
          lsp-pylsp-plugins-mypy-enabled t
          lsp-pylsp-plugins-rope-autoimport-enabled t
          )

    )

  (use-package lsp-ui
    :ensure t
    )

  (use-package lsp-pyright
    :ensure t
    )

  (use-package ruff-format
    :ensure t
    )

  (use-package flymake-ruff
    :hook (python-mode . flymake-ruff-load)
    )

#+END_SRC
** Treemacs
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package treemacs
  :ensure t
  :defer t
  :init
  (with-eval-after-load 'winum
    (define-key winum-keymap (kbd "M-0") #'treemacs-select-window))
  :config
  (progn
    (setq treemacs-collapse-dirs                   (if treemacs-python-executable 3 0)
          treemacs-deferred-git-apply-delay        0.5
          treemacs-directory-name-transformer      #'identity
          treemacs-display-in-side-window          t
          treemacs-eldoc-display                   'simple
          treemacs-file-event-delay                2000
          treemacs-file-extension-regex            treemacs-last-period-regex-value
          treemacs-file-follow-delay               0.2
          treemacs-file-name-transformer           #'identity
          treemacs-follow-after-init               t
          treemacs-expand-after-init               t
          treemacs-find-workspace-method           'find-for-file-or-pick-first
          treemacs-git-command-pipe                ""
          treemacs-goto-tag-strategy               'refetch-index
          treemacs-header-scroll-indicators        '(nil . "^^^^^^")
          treemacs-hide-dot-git-directory          t
          treemacs-indentation                     2
          treemacs-indentation-string              " "
          treemacs-is-never-other-window           nil
          treemacs-max-git-entries                 5000
          treemacs-missing-project-action          'ask
          treemacs-move-files-by-mouse-dragging    t
          treemacs-move-forward-on-expand          nil
          treemacs-no-png-images                   nil
          treemacs-no-delete-other-windows         t
          treemacs-project-follow-cleanup          nil
          treemacs-persist-file                    (expand-file-name ".cache/treemacs-persist" user-emacs-directory)
          treemacs-position                        'left
          treemacs-read-string-input               'from-child-frame
          treemacs-recenter-distance               0.1
          treemacs-recenter-after-file-follow      nil
          treemacs-recenter-after-tag-follow       nil
          treemacs-recenter-after-project-jump     'always
          treemacs-recenter-after-project-expand   'on-distance
          treemacs-litter-directories              '("/node_modules" "/.venv" "/.cask")
          treemacs-project-follow-into-home        nil
          treemacs-show-cursor                     nil
          treemacs-show-hidden-files               t
          treemacs-silent-filewatch                nil
          treemacs-silent-refresh                  nil
          treemacs-sorting                         'alphabetic-asc
          treemacs-select-when-already-in-treemacs 'move-back
          treemacs-space-between-root-nodes        t
          treemacs-tag-follow-cleanup              t
          treemacs-tag-follow-delay                1.5
          treemacs-text-scale                      nil
          treemacs-user-mode-line-format           nil
          treemacs-user-header-line-format         nil
          treemacs-wide-toggle-width               70
          treemacs-width                           35
          treemacs-width-increment                 1
          treemacs-width-is-initially-locked       t
          treemacs-workspace-switch-cleanup        nil)

    ;; The default width and height of the icons is 22 pixels. If you are
    ;; using a Hi-DPI display, uncomment this to double the icon size.
    ;;(treemacs-resize-icons 44)

    (treemacs-follow-mode t)
    (treemacs-filewatch-mode t)
    (treemacs-fringe-indicator-mode 'always)
    (when treemacs-python-executable
      (treemacs-git-commit-diff-mode t))

    (pcase (cons (not (null (executable-find "git")))
                 (not (null treemacs-python-executable)))
      (`(t . t)
       (treemacs-git-mode 'deferred))
      (`(t . _)
       (treemacs-git-mode 'simple)))

    (treemacs-hide-gitignored-files-mode nil))
  :bind
  (:map global-map
        ("M-0"       . treemacs-select-window)
        ("C-x t 1"   . treemacs-delete-other-windows)
        ("C-x t t"   . treemacs)
        ("C-x t d"   . treemacs-select-directory)
        ("C-x t B"   . treemacs-bookmark)
        ("C-x t C-t" . treemacs-find-file)
        ("C-x t M-t" . treemacs-find-tag)))

(use-package treemacs-evil
  :after (treemacs evil)
  :ensure t)

(use-package treemacs-projectile
  :after (treemacs projectile)
  :ensure t)

(use-package treemacs-icons-dired
  :hook (dired-mode . treemacs-icons-dired-enable-once)
  :ensure t)

(use-package treemacs-magit
  :after (treemacs magit)
  :ensure t)

(use-package treemacs-persp ;;treemacs-perspective if you use perspective.el vs. persp-mode
  :after (treemacs persp-mode) ;;or perspective vs. persp-mode
  :ensure t
  :config (treemacs-set-scope-type 'Perspectives))

(use-package treemacs-tab-bar ;;treemacs-tab-bar if you use tab-bar-mode
  :after (treemacs)
  :ensure t
  :config (treemacs-set-scope-type 'Tabs))

#+END_SRC

** Helm
#+BEGIN_SRC emacs-lisp :tangle yes

  (use-package helm-icons
    :ensure t
    :config
    (setq helm-icons-provider 'all-the-icons)
    )

  (helm-icons-enable)
  (use-package helm
    :ensure t
    :config
    (setq helm-split-window-inside-p t)
    (setq helm-use-frame-when-more-than-two-windows t)
    (helm-autoresize-mode 1)
    )

  (use-package helm-mode
    :config (helm-mode 1))

  (use-package helm-command
    :bind (("M-x" . helm-M-x)))

  (use-package helm-files
    :bind (("C-x C-f" . helm-find-files)))

  (use-package helm-buffers
    :bind (("C-x C-b" . helm-buffers-list)
           ("M-s m" . helm-mini))
    :config (setq helm-buffer-max-length nil))

  (use-package helm-occur
    :bind (("M-s o" . helm-occur)))

  (use-package helm-imenu
    :bind (("M-s i" . helm-imenu))
    :config (setq imenu-max-item-length 120))

  (use-package helm-bookmarks
    :bind (("M-s b" . helm-bookmarks)))

#+END_SRC

** Dashboard
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package dashboard
    :ensure t
    :init (progn
            (dashboard-setup-startup-hook)
            (setq dashboard-banner-logo-title "Steel sky 0.2.7")
            (setq dashboard-startup-banner "~/.emacs.d/img/logo-medium.png")
            (setq dashboard-items '((recents  . 20)))
            (setq dashboard-init-info "\"Steel sky\" a flavour of emacs with a hint of fresh blue skies, coffee and rusty steel.")
            (setq dashboard-footer-messages '("Keep up the good work!"))
            (if (< (length command-line-args) 2)
                (setq initial-buffer-choice (lambda () (get-buffer "*dashboard*")))
              )
            )
    )
#+END_SRC

** YaSnippets
Create a new snippet with M-x yas/new-snippet
ex.
#+BEGIN_SRC
# -*- mode: snippet -*-
# name: Python generate class
# key: <<pc
# --

# ${1:var_name} works like a form

class ${1:class_name}(object):

$0 # Cursor goes here
#+END_SRC

Include the yasnippet in our config:
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package yasnippet
  :ensure t
  :config
  (setq yas-snippet-dirs '("~/.emacs.d/snippets"))
  (yas-global-mode 1))
#+END_SRC
** Languages
*** Python
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package python
    :hook
    (python-mode . lsp-mode)
    (python-mode . ruff-format-on-save-mode)
    )
#+END_SRC
*** RUST
Rudimentary Rust support
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package rust-mode
    :ensure t
    :config
    (setq rust-format-on-save t)
    :hook
    (rust-mode . prettify-symbols-mode)
    )
#+END_SRC

*** Web Mode
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package web-mode
    :ensure t
  )
#+END_SRC

** Extras
*** CHAT GPT shell
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package chatgpt-shell
    :ensure t
    )
#+END_SRC
** COMMENT Projectile
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package projectile
    :ensure t
    :init
    (projectile-mode +1)
    :bind (:map projectile-mode-map
                ("C-c p" . projectile-command-map))
    )
#+END_SRC

** COMMENT Ignore me, just trying out themes. And notes

#+BEGIN_SRC emacs-lisp :tangle yes
(load-theme 'base16-3024)
(load-theme 'base16-apathy)
(load-theme 'base16-apprentice)
(load-theme 'base16-ashes)
(load-theme 'base16-atelier-cave-light)
(load-theme 'base16-atelier-cave)
(load-theme 'base16-atelier-dune-light)
(load-theme 'base16-atelier-dune)
(load-theme 'base16-atelier-estuary-light)
(load-theme 'base16-atelier-estuary)
(load-theme 'base16-atelier-forest-light)
(load-theme 'base16-atelier-forest)
(load-theme 'base16-atelier-heath-light)
(load-theme 'base16-atelier-heath)
(load-theme 'base16-atelier-lakeside-light)
(load-theme 'base16-atelier-lakeside)
(load-theme 'base16-atelier-plateau-light)
(load-theme 'base16-atelier-plateau)
(load-theme 'base16-atelier-savanna-light)
(load-theme 'base16-atelier-savanna)
(load-theme 'base16-atelier-seaside-light)
(load-theme 'base16-atelier-seaside)
(load-theme 'base16-atelier-sulphurpool-light)
(load-theme 'base16-atelier-sulphurpool)
(load-theme 'base16-atlas)
(load-theme 'base16-ayu-dark)
(load-theme 'base16-ayu-light)
(load-theme 'base16-ayu-mirage)
(load-theme 'base16-aztec)
(load-theme 'base16-bespin)
(load-theme 'base16-black-metal-bathory)
(load-theme 'base16-black-metal-burzum)
(load-theme 'base16-black-metal-dark-funeral)
(load-theme 'base16-black-metal-gorgoroth)
(load-theme 'base16-black-metal-immortal)
(load-theme 'base16-black-metal-khold)
(load-theme 'base16-black-metal-marduk)
(load-theme 'base16-black-metal-mayhem)
(load-theme 'base16-black-metal-nile)
(load-theme 'base16-black-metal)
(load-theme 'base16-black-metal-venom)
(load-theme 'base16-blueforest)
(load-theme 'base16-blueish)
(load-theme 'base16-brewer)
(load-theme 'base16-bright)
(load-theme 'base16-brogrammer)
(load-theme 'base16-brushtrees-dark)
(load-theme 'base16-brushtrees)
(load-theme 'base16-caroline)
(load-theme 'base16-catppuccin-frappe)
(load-theme 'base16-catppuccin-latte)
(load-theme 'base16-catppuccin-macchiato)
(load-theme 'base16-catppuccin-mocha)
(load-theme 'base16-catppuccin)
(load-theme 'base16-chalk)
(load-theme 'base16-circus)
(load-theme 'base16-classic-dark)
(load-theme 'base16-classic-light)
(load-theme 'base16-codeschool)
(load-theme 'base16-colors)
(load-theme 'base16-cupcake)
(load-theme 'base16-cupertino)
(load-theme 'base16-da-one-black)
(load-theme 'base16-da-one-gray)
(load-theme 'base16-da-one-ocean)
(load-theme 'base16-da-one-paper)
(load-theme 'base16-da-one-sea)
(load-theme 'base16-da-one-white)
(load-theme 'base16-danqing-light)
(load-theme 'base16-danqing)
(load-theme 'base16-darcula)
(load-theme 'base16-darkmoss)
(load-theme 'base16-darktooth)
(load-theme 'base16-darkviolet)
(load-theme 'base16-decaf)
(load-theme 'base16-deep-oceanic-next)
(load-theme 'base16-default-dark)
(load-theme 'base16-default-light)
(load-theme 'base16-dirtysea)
(load-theme 'base16-dracula)
(load-theme 'base16-edge-dark)
(load-theme 'base16-edge-light)
(load-theme 'base16-eighties)
(load-theme 'base16-embers-light)
(load-theme 'base16-embers)
(load-theme 'base16-emil)
(load-theme 'base16-equilibrium-dark)
(load-theme 'base16-equilibrium-gray-dark)
(load-theme 'base16-equilibrium-gray-light)
(load-theme 'base16-equilibrium-light)
(load-theme 'base16-eris)
(load-theme 'base16-espresso)
(load-theme 'base16-eva-dim)
(load-theme 'base16-eva)
(load-theme 'base16-evenok-dark)
(load-theme 'base16-everforest-dark-hard)
(load-theme 'base16-everforest)
(load-theme 'base16-flat)
(load-theme 'base16-framer)
(load-theme 'base16-fruit-soda)
(load-theme 'base16-gigavolt)
(load-theme 'base16-github)
(load-theme 'base16-google-dark)
(load-theme 'base16-google-light)
(load-theme 'base16-gotham)
(load-theme 'base16-grayscale-dark)
(load-theme 'base16-grayscale-light)
(load-theme 'base16-greenscreen)
(load-theme 'base16-gruber)
(load-theme 'base16-gruvbox-dark-hard)
(load-theme 'base16-gruvbox-dark-medium)
(load-theme 'base16-gruvbox-dark-pale)
(load-theme 'base16-gruvbox-dark-soft)
(load-theme 'base16-gruvbox-light-hard)
(load-theme 'base16-gruvbox-light-medium)
(load-theme 'base16-gruvbox-light-soft)
(load-theme 'base16-gruvbox-material-dark-hard)
(load-theme 'base16-gruvbox-material-dark-medium)
(load-theme 'base16-gruvbox-material-dark-soft)
(load-theme 'base16-gruvbox-material-light-hard)
(load-theme 'base16-gruvbox-material-light-medium)
(load-theme 'base16-gruvbox-material-light-soft)
(load-theme 'base16-hardcore)
(load-theme 'base16-harmonic16-dark)
(load-theme 'base16-harmonic16-light)
(load-theme 'base16-heetch-light)
(load-theme 'base16-heetch)
(load-theme 'base16-helios)
(load-theme 'base16-hopscotch)
(load-theme 'base16-horizon-dark)
(load-theme 'base16-horizon-light)
(load-theme 'base16-horizon-terminal-dark)
(load-theme 'base16-horizon-terminal-light)
(load-theme 'base16-humanoid-dark)
(load-theme 'base16-humanoid-light)
(load-theme 'base16-ia-dark)
(load-theme 'base16-ia-light)
(load-theme 'base16-icy)
(load-theme 'base16-irblack)
(load-theme 'base16-isotope)
(load-theme 'base16-jabuti)
(load-theme 'base16-kanagawa)
(load-theme 'base16-katy)
(load-theme 'base16-kimber)
(load-theme 'base16-lime)
(load-theme 'base16-macintosh)
(load-theme 'base16-marrakesh)
(load-theme 'base16-materia)
(load-theme 'base16-material-darker)
(load-theme 'base16-material-lighter)
(load-theme 'base16-material-palenight)
(load-theme 'base16-material)
(load-theme 'base16-material-vivid)
(load-theme 'base16-measured-dark)
(load-theme 'base16-measured-light)
(load-theme 'base16-mellow-purple)
(load-theme 'base16-mexico-light)
(load-theme 'base16-mocha)
(load-theme 'base16-monokai)
(load-theme 'base16-moonlight)
(load-theme 'base16-mountain)
(load-theme 'base16-nebula)
(load-theme 'base16-nord-light)
(load-theme 'base16-nord)
(load-theme 'base16-nova)
(load-theme 'base16-ocean)
(load-theme 'base16-oceanicnext)
(load-theme 'base16-one-light)
(load-theme 'base16-onedark-dark)
(load-theme 'base16-onedark)
(load-theme 'base16-outrun-dark)
(load-theme 'base16-oxocarbon-dark)
(load-theme 'base16-oxocarbon-light)
(load-theme 'base16-pandora)
(load-theme 'base16-papercolor-dark)
(load-theme 'base16-papercolor-light)
(load-theme 'base16-paraiso)
(load-theme 'base16-pasque)
(load-theme 'base16-phd)
(load-theme 'base16-pico)
(load-theme 'base16-pinky)
(load-theme 'base16-pop)
(load-theme 'base16-porple)
(load-theme 'base16-precious-dark-eleven)
(load-theme 'base16-precious-dark-fifteen)
(load-theme 'base16-precious-light-warm)
(load-theme 'base16-precious-light-white)
(load-theme 'base16-primer-dark-dimmed)
(load-theme 'base16-primer-dark)
(load-theme 'base16-primer-light)
(load-theme 'base16-purpledream)
(load-theme 'base16-qualia)
(load-theme 'base16-railscasts)
(load-theme 'base16-rebecca)
(load-theme 'base16-rose-pine-dawn)
(load-theme 'base16-rose-pine-moon)
(load-theme 'base16-rose-pine)
(load-theme 'base16-saga)
(load-theme 'base16-sagelight)
(load-theme 'base16-sakura)
(load-theme 'base16-sandcastle)
(load-theme 'base16-selenized-black)
(load-theme 'base16-selenized-dark)
(load-theme 'base16-selenized-light)
(load-theme 'base16-selenized-white)
(load-theme 'base16-seti)
(load-theme 'base16-shades-of-purple)
(load-theme 'base16-shadesmear-dark)
(load-theme 'base16-shadesmear-light)
(load-theme 'base16-shapeshifter)
(load-theme 'base16-silk-dark)
(load-theme 'base16-silk-light)
(load-theme 'base16-snazzy)
(load-theme 'base16-solarflare-light)
(load-theme 'base16-solarflare)
(load-theme 'base16-solarized-dark)
(load-theme 'base16-solarized-light)
(load-theme 'base16-spaceduck)
(load-theme 'base16-spacemacs)
(load-theme 'base16-sparky)
(load-theme 'base16-standardized-dark)
(load-theme 'base16-standardized-light)
(load-theme 'base16-stella)
(load-theme 'base16-still-alive)
(load-theme 'base16-summercamp)
(load-theme 'base16-summerfruit-dark)
(load-theme 'base16-summerfruit-light)
(load-theme 'base16-synth-midnight-dark)
(load-theme 'base16-synth-midnight-light)
(load-theme 'base16-tango)
(load-theme 'base16-tarot)
(load-theme 'base16-tender)
(load-theme 'base16-terracotta-dark)
(load-theme 'base16-terracotta)
(load-theme 'base16)
(load-theme 'base16-tokyo-city-dark)
(load-theme 'base16-tokyo-city-light)
(load-theme 'base16-tokyo-city-terminal-dark)
(load-theme 'base16-tokyo-city-terminal-light)
(load-theme 'base16-tokyo-night-dark)
(load-theme 'base16-tokyo-night-light)
(load-theme 'base16-tokyo-night-moon)
(load-theme 'base16-tokyo-night-storm)
(load-theme 'base16-tokyo-night-terminal-dark)
(load-theme 'base16-tokyo-night-terminal-light)
(load-theme 'base16-tokyo-night-terminal-storm)
(load-theme 'base16-tokyodark-terminal)
(load-theme 'base16-tokyodark)
(load-theme 'base16-tomorrow-night-eighties)
(load-theme 'base16-tomorrow-night)
(load-theme 'base16-tomorrow)
(load-theme 'base16-tube)
(load-theme 'base16-twilight)
(load-theme 'base16-unikitty-dark)
(load-theme 'base16-unikitty-light)
(load-theme 'base16-unikitty-reversible)
(load-theme 'base16-uwunicorn)
(load-theme 'base16-vesper)
(load-theme 'base16-vice)
(load-theme 'base16-vulcan)
(load-theme 'base16-windows-10-light)
(load-theme 'base16-windows-10)
(load-theme 'base16-windows-95-light)
(load-theme 'base16-windows-95)
(load-theme 'base16-windows-highcontrast-light)
(load-theme 'base16-windows-highcontrast)
(load-theme 'base16-windows-nt-light)
(load-theme 'base16-windows-nt)
(load-theme 'base16-woodland)
(load-theme 'base16-xcode-dusk)
(load-theme 'base16-zenbones)
(load-theme 'base16-zenburn)
(load-theme 'birds-of-paradise-plus)
(load-theme 'ewal-spacemacs-classic)
(load-theme 'ewal-spacemacs-modern)
(load-theme 'spacemacs-dark)
(load-theme 'spacemacs-light)
(load-theme 'spacemacs)
(load-theme 'adwaita)
(load-theme 'deeper-blue)
(load-theme 'dichromacy)
(load-theme 'leuven-dark)
(load-theme 'leuven)
(load-theme 'light-blue)
(load-theme 'manoj-dark)
(load-theme 'misterioso)
(load-theme 'modus-operandi)
(load-theme 'modus-vivendi)
(load-theme 'tango-dark)
(load-theme 'tango)
(load-theme 'tsdh-dark)
(load-theme 'tsdh-light)
(load-theme 'wheatgrass)
(load-theme 'whiteboard)
(load-theme 'wombat)
#+END_SRC
** Notes
Lookin into org-mode styling:
https://sophiebos.io/posts/beautifying-emacs-org-mode/

Look in to python mode setup:
https://webbureaucrat.dev/articles/emacs-for-python-and-poetry-using-basedpyright-langserver/
